$date
	Sun Jul 05 20:54:15 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 5 multoreg $end
$var wire 1 ( memwrite $end
$var wire 1 6 memtoreg $end
$var wire 1 7 lui $end
$var wire 1 8 lohi $end
$var wire 1 9 jr $end
$var wire 1 : jal $end
$var wire 1 ; domul $end
$var wire 1 < dojump $end
$var wire 1 = dobranch $end
$var wire 5 > destreg [4:0] $end
$var wire 1 ? asigned $end
$var wire 1 @ alusrcbimm $end
$var wire 32 A aluout [31:0] $end
$var wire 3 B alucontrol [2:0] $end
$scope module decoder $end
$var wire 32 C instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 D op [5:0] $end
$var wire 6 E funct [5:0] $end
$var reg 3 F alucontrol [2:0] $end
$var reg 1 @ alusrcbimm $end
$var reg 1 ? asigned $end
$var reg 5 G destreg [4:0] $end
$var reg 1 = dobranch $end
$var reg 1 < dojump $end
$var reg 1 ; domul $end
$var reg 1 : jal $end
$var reg 1 9 jr $end
$var reg 1 8 lohi $end
$var reg 1 7 lui $end
$var reg 1 6 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 5 multoreg $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 3 H alucontrol [2:0] $end
$var wire 1 @ alusrcbimm $end
$var wire 1 ? asigned $end
$var wire 1 ! clk $end
$var wire 5 I destreg [4:0] $end
$var wire 1 = dobranch $end
$var wire 1 ; domul $end
$var wire 32 J hi [31:0] $end
$var wire 32 K instr [31:0] $end
$var wire 1 : jal $end
$var wire 1 9 jr $end
$var wire 1 < jump $end
$var wire 32 L lo [31:0] $end
$var wire 1 8 lohi $end
$var wire 1 7 lui $end
$var wire 1 6 memtoreg $end
$var wire 1 5 multoreg $end
$var wire 32 M readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 N writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 O srcbimm [31:0] $end
$var wire 32 P srcb [31:0] $end
$var wire 32 Q srca [31:0] $end
$var wire 32 R signimm [31:0] $end
$var wire 32 S result [31:0] $end
$var wire 32 T pc [31:0] $end
$var wire 64 U mmout [63:0] $end
$var wire 32 V luiout [31:0] $end
$var wire 32 W aluout [31:0] $end
$scope module alu $end
$var wire 3 X alucontrol [2:0] $end
$var wire 1 ? asigned $end
$var wire 32 Y b [31:0] $end
$var wire 32 Z result [31:0] $end
$var wire 1 1 zero $end
$var wire 32 [ a [31:0] $end
$var reg 32 \ resreg [31:0] $end
$var reg 32 ] w1 [31:0] $end
$var reg 1 ^ w2 $end
$var reg 1 _ z $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 ` ra1 [4:0] $end
$var wire 5 a ra2 [4:0] $end
$var wire 5 b wa3 [4:0] $end
$var wire 32 c wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 d rd2 [31:0] $end
$var wire 32 e rd1 [31:0] $end
$upscope $end
$scope module lu $end
$var wire 16 f i [15:0] $end
$var wire 32 g o [31:0] $end
$upscope $end
$scope module m $end
$var wire 32 h a [31:0] $end
$var wire 32 i b [31:0] $end
$var wire 64 j out [63:0] $end
$var wire 1 k c $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 = dobranch $end
$var wire 1 < dojump $end
$var wire 1 9 jr $end
$var wire 26 l jumptarget [25:0] $end
$var wire 32 m progcounter [31:0] $end
$var wire 32 n register [31:0] $end
$var wire 1 " reset $end
$var wire 32 o nextpc [31:0] $end
$var wire 32 p incpc [31:0] $end
$var wire 32 q branchpc [31:0] $end
$var wire 32 r branchoffset [31:0] $end
$var reg 32 s pc [31:0] $end
$scope module pcbranch $end
$var wire 32 t b [31:0] $end
$var wire 1 u cin $end
$var wire 32 v y [31:0] $end
$var wire 1 w cout $end
$var wire 32 x a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 y a [31:0] $end
$var wire 32 z b [31:0] $end
$var wire 1 { cin $end
$var wire 32 | y [31:0] $end
$var wire 1 } cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 ~ a [15:0] $end
$var wire 32 !" y [31:0] $end
$upscope $end
$scope module specr $end
$var wire 1 ! clk $end
$var wire 32 "" hi_r [31:0] $end
$var wire 32 #" lo_r [31:0] $end
$var wire 1 ; mul_we $end
$var wire 64 $" mulres [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 $"
bx #"
bx ""
b1111011 !"
b1111011 ~
0}
b10000000000000000000100 |
0{
b100 z
b10000000000000000000000 y
b10000000000000000000100 x
0w
b10000000000000111110000 v
0u
b111101100 t
b10000000000000000000000 s
b1111011 r
b10000000000000111110000 q
b10000000000000000000100 p
b10000000000000000000100 o
b0 n
b10000000000000000000000 m
b10000000001111011 l
0k
b0 j
b1111011 i
b0 h
b11110110000000000000000 g
b1111011 f
b0 e
b11001010111111101011101010111110 d
b1111011 c
b1 b
b1 a
b0 `
0_
0^
b1111011 ]
b1111011 \
b0 [
b1111011 Z
b1111011 Y
b101 X
b1111011 W
b11110110000000000000000 V
b0 U
b10000000000000000000000 T
b1111011 S
b1111011 R
b0 Q
b11001010111111101011101010111110 P
b1111011 O
b11001010111111101011101010111110 N
bx M
bx L
b100100000000010000000001111011 K
bx J
b1 I
b101 H
b1 G
b101 F
b111011 E
b1001 D
b100100000000010000000001111011 C
b101 B
b1111011 A
1@
0?
b1 >
0=
0<
0;
0:
09
x8
07
06
05
b10000000000000000000000 4
13
b11001010111111101011101010111110 2
01
bx 0
b100100000000010000000001111011 /
b100100000000010000000001111011 .
b0 -
b11001010111111101011101010111110 ,
bx +
b11110 *
b1111011 )
0(
b100100000000010000000001111011 '
b10000000000000000000000 &
bx %
b11001010111111101011101010111110 $
b100000 #
1"
1!
$end
#2
0!
#4
b1111011 $
b1111011 ,
b1111011 2
b1111011 N
b1111011 P
b1111011 d
1!
#5
0"
#6
0!
#8
b111001000 S
b111001000 c
b110010 *
b10000000000000000001000 o
b111001000 )
b111001000 A
b111001000 W
b111001000 Z
b111001000 \
b111001000 ]
b11100100000 t
b111001000 O
b111001000 Y
b111001000 i
b1110010000000000000000000 V
b1110010000000000000000000 g
b11001010111111101011101010111110 $
b11001010111111101011101010111110 ,
b11001010111111101011101010111110 2
b11001010111111101011101010111110 N
b11001010111111101011101010111110 P
b11001010111111101011101010111110 d
b10000000000011100101000 q
b10000000000011100101000 v
b10 >
b10 G
b10 I
b10 b
b1000 E
b100000000111001000 l
b111001000 R
b111001000 r
b111001000 !"
b111001000 ~
b111001000 f
b10 a
b10000000000000000001000 p
b10000000000000000001000 x
b10000000000000000001000 |
b100100000000100000000111001000 '
b100100000000100000000111001000 .
b100100000000100000000111001000 /
b100100000000100000000111001000 C
b100100000000100000000111001000 K
b1 -
b10000000000000000000100 &
b10000000000000000000100 4
b10000000000000000000100 T
b10000000000000000000100 m
b10000000000000000000100 s
b10000000000000000000100 y
1!
#10
0!
#12
b10000000000000000001100 o
b1101101100011000 U
b1101101100011000 j
b1101101100011000 $"
b1100100 t
b110010000000000000000 V
b110010000000000000000 g
b1111011 Q
b1111011 [
b1111011 e
b1111011 h
b1111011 n
b10000000000000001110000 q
b10000000000000001110000 v
bx >
bx G
bx I
bx b
03
1;
b11 B
b11 F
b11 H
b11 X
0@
b0 D
b11001 E
b1000100000000000011001 l
b11001 R
b11001 r
b11001 !"
b11001 ~
b11001 f
b1 `
b111001000 $
b111001000 ,
b111001000 2
b111001000 N
b111001000 P
b111001000 d
b10000000000000000001100 p
b10000000000000000001100 x
b10000000000000000001100 |
b1000100000000000011001 '
b1000100000000000011001 .
b1000100000000000011001 /
b1000100000000000011001 C
b1000100000000000011001 K
b10 -
b10000000000000000001000 &
b10000000000000000001000 4
b10000000000000000001000 T
b10000000000000000001000 m
b10000000000000000001000 s
b10000000000000000001000 y
1!
#14
0!
#16
b10000000000000000010000 o
b1101101100011000 S
b1101101100011000 c
b0 U
b0 j
b0 $"
b0 O
b0 Y
b0 i
b110000001001000 t
b11000000100100000000000000000 V
b11000000100100000000000000000 g
b0 Q
b0 [
b0 e
b0 h
b0 n
b0 $
b0 ,
b0 2
b0 N
b0 P
b0 d
b10000000110000001011000 q
b10000000110000001011000 v
08
15
b11 >
b11 G
b11 I
b11 b
13
0;
b10010 E
b1100000010010 l
b1100000010010 R
b1100000010010 r
b1100000010010 !"
b1100000010010 ~
b1100000010010 f
b0 `
b0 a
b10000000000000000010000 p
b10000000000000000010000 x
b10000000000000000010000 |
b1100000010010 '
b1100000010010 .
b1100000010010 /
b1100000010010 C
b1100000010010 K
b11 -
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 T
b10000000000000000001100 m
b10000000000000000001100 s
b10000000000000000001100 y
b0 J
b0 ""
b1101101100011000 L
b1101101100011000 #"
1!
#18
0!
#20
b0 S
b0 c
b10000000000000000010100 o
b1000000001000000 t
b100000000100000000000000000000 V
b100000000100000000000000000000 g
b10000001000000001010100 q
b10000001000000001010100 v
18
b100 >
b100 G
b100 I
b100 b
b10000 E
b10000000010000 l
b10000000010000 R
b10000000010000 r
b10000000010000 !"
b10000000010000 ~
b10000000010000 f
b10000000000000000010100 p
b10000000000000000010100 x
b10000000000000000010100 |
b10000000010000 '
b10000000010000 .
b10000000010000 /
b10000000010000 C
b10000000010000 K
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 T
b10000000000000000010000 m
b10000000000000000010000 s
b10000000000000000010000 y
1!
#22
0!
#24
bx S
bx c
bx o
xw
bx U
bx j
bx $"
xk
bx O
bx Y
bx i
bx00 t
bx0000000000000000 V
bx0000000000000000 g
bx Q
bx [
bx e
bx h
bx n
bx $
bx ,
bx 2
bx N
bx P
bx d
bx q
bx v
x8
05
x<
x6
x(
x=
x@
bx >
bx G
bx I
bx b
x3
bx D
bx E
bx l
bx R
bx r
bx !"
bx ~
bx f
bx `
bx a
b10000000000000000011000 p
b10000000000000000011000 x
b10000000000000000011000 |
bx '
bx .
bx /
bx C
bx K
b101 -
b10000000000000000010100 &
b10000000000000000010100 4
b10000000000000000010100 T
b10000000000000000010100 m
b10000000000000000010100 s
b10000000000000000010100 y
1!
#26
0!
#28
bx p
bx x
bx |
x}
bx -
bx &
bx 4
bx T
bx m
bx s
bx y
1!
#29
b100000 #
