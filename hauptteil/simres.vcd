$date
	Tue Jun 30 22:02:01 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 5 multoreg $end
$var wire 1 ( memwrite $end
$var wire 1 6 memtoreg $end
$var wire 1 7 lui $end
$var wire 1 8 lohi $end
$var wire 1 9 jal $end
$var wire 1 : domul $end
$var wire 1 ; dojump $end
$var wire 1 < dobranch $end
$var wire 5 = destreg [4:0] $end
$var wire 1 > alusrcbimm $end
$var wire 32 ? aluout [31:0] $end
$var wire 3 @ alucontrol [2:0] $end
$scope module decoder $end
$var wire 32 A instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 B op [5:0] $end
$var wire 6 C funct [5:0] $end
$var reg 3 D alucontrol [2:0] $end
$var reg 1 > alusrcbimm $end
$var reg 5 E destreg [4:0] $end
$var reg 1 < dobranch $end
$var reg 1 ; dojump $end
$var reg 1 : domul $end
$var reg 1 9 jal $end
$var reg 1 8 lohi $end
$var reg 1 7 lui $end
$var reg 1 6 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 5 multoreg $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 3 F alucontrol [2:0] $end
$var wire 1 > alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 G destreg [4:0] $end
$var wire 1 < dobranch $end
$var wire 1 : domul $end
$var wire 32 H hi [31:0] $end
$var wire 32 I instr [31:0] $end
$var wire 1 9 jal $end
$var wire 1 ; jump $end
$var wire 32 J lo [31:0] $end
$var wire 1 8 lohi $end
$var wire 1 7 lui $end
$var wire 1 6 memtoreg $end
$var wire 1 5 multoreg $end
$var wire 32 K readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 L writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 M srcbimm [31:0] $end
$var wire 32 N srcb [31:0] $end
$var wire 32 O srca [31:0] $end
$var wire 32 P signimm [31:0] $end
$var wire 32 Q result [31:0] $end
$var wire 32 R pc [31:0] $end
$var wire 64 S mmout [63:0] $end
$var wire 32 T luiout [31:0] $end
$var wire 32 U aluout [31:0] $end
$scope module alu $end
$var wire 3 V alucontrol [2:0] $end
$var wire 32 W b [31:0] $end
$var wire 32 X result [31:0] $end
$var wire 1 1 zero $end
$var wire 32 Y a [31:0] $end
$var reg 32 Z resreg [31:0] $end
$var reg 32 [ w1 [31:0] $end
$var reg 1 \ w2 $end
$var reg 1 ] z $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 ^ ra1 [4:0] $end
$var wire 5 _ ra2 [4:0] $end
$var wire 5 ` wa3 [4:0] $end
$var wire 32 a wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 b rd2 [31:0] $end
$var wire 32 c rd1 [31:0] $end
$upscope $end
$scope module lu $end
$var wire 16 d i [15:0] $end
$var wire 32 e o [31:0] $end
$upscope $end
$scope module m $end
$var wire 32 f a [31:0] $end
$var wire 32 g b [31:0] $end
$var wire 64 h out [63:0] $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 < dobranch $end
$var wire 1 ; dojump $end
$var wire 26 i jumptarget [25:0] $end
$var wire 32 j progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 k nextpc [31:0] $end
$var wire 32 l incpc [31:0] $end
$var wire 32 m branchpc [31:0] $end
$var wire 32 n branchoffset [31:0] $end
$var reg 32 o pc [31:0] $end
$scope module pcbranch $end
$var wire 32 p b [31:0] $end
$var wire 1 q cin $end
$var wire 32 r y [31:0] $end
$var wire 1 s cout $end
$var wire 32 t a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 u a [31:0] $end
$var wire 32 v b [31:0] $end
$var wire 1 w cin $end
$var wire 32 x y [31:0] $end
$var wire 1 y cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 z a [15:0] $end
$var wire 32 { y [31:0] $end
$upscope $end
$scope module specr $end
$var wire 1 ! clk $end
$var wire 32 | hi_r [31:0] $end
$var wire 32 } lo_r [31:0] $end
$var wire 1 : mul_we $end
$var wire 64 ~ mulres [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ~
bx }
bx |
b11 {
b11 z
0y
b10000000000000000000100 x
0w
b100 v
b10000000000000000000000 u
b10000000000000000000100 t
0s
b10000000000000000010000 r
0q
b1100 p
b10000000000000000000000 o
b11 n
b10000000000000000010000 m
b10000000000000000000100 l
b10000000000000000001100 k
b10000000000000000000000 j
b100000000000000000011 i
b0 h
b11001010111111101011101010111110 g
b0 f
b110000000000000000 e
b11 d
b0 c
b11001010111111101011101010111110 b
b10000000000000000000100 a
b11111 `
b10000 _
b0 ^
x]
x\
bx [
bx Z
b0 Y
bx X
b11001010111111101011101010111110 W
b11 V
bx U
b110000000000000000 T
b0 S
b10000000000000000000000 R
b10000000000000000000100 Q
b11 P
b0 O
b11001010111111101011101010111110 N
b11001010111111101011101010111110 M
b11001010111111101011101010111110 L
bx K
bx J
b1100000100000000000000000011 I
bx H
b11111 G
b11 F
b11111 E
b11 D
b11 C
b11 B
b1100000100000000000000000011 A
b11 @
bx ?
0>
b11111 =
0<
1;
0:
19
x8
07
06
05
b10000000000000000000000 4
13
b11001010111111101011101010111110 2
x1
bx 0
b1100000100000000000000000011 /
b1100000100000000000000000011 .
b0 -
b11001010111111101011101010111110 ,
bx +
bx *
bx )
0(
b1100000100000000000000000011 '
b10000000000000000000000 &
bx %
b11001010111111101011101010111110 $
b100000 #
1"
1!
$end
#2
0!
#4
1!
#5
0"
#6
0!
#8
b11110 *
01
0]
b1111011 )
b1111011 ?
b1111011 U
b1111011 X
b1111011 Z
0\
b1111011 [
b1111011 M
b1111011 W
b1111011 g
b10000000000000000010000 k
b111101100 p
b11110110000000000000000 T
b11110110000000000000000 e
b10000000000000111111100 m
b10000000000000111111100 r
09
b101 @
b101 D
b101 F
b101 V
0;
1>
b101 =
b101 E
b101 G
b101 `
b1001 B
b111011 C
b1010000000001111011 i
b1111011 P
b1111011 n
b1111011 {
b1111011 z
b1111011 d
b101 _
b10000000000000000010000 l
b10000000000000000010000 t
b10000000000000000010000 x
b1111011 Q
b1111011 a
b100100000001010000000001111011 '
b100100000001010000000001111011 .
b100100000001010000000001111011 /
b100100000001010000000001111011 A
b100100000001010000000001111011 I
b11 -
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 R
b10000000000000000001100 j
b10000000000000000001100 o
b10000000000000000001100 u
1!
#10
0!
#12
b10000000000000000010100 k
b100000 p
b0 M
b0 W
b0 g
b10000000000000000000 T
b10000000000000000000 e
b0 S
b0 h
b0 ~
b10000000000000000000100 O
b10000000000000000000100 Y
b10000000000000000000100 c
b10000000000000000000100 f
b10000000000000000110100 m
b10000000000000000110100 r
b11111 =
b11111 E
b11111 G
b11111 `
b11 @
b11 D
b11 F
b11 V
0>
b0 B
b1000 C
b11111000000000000000001000 i
b1000 P
b1000 n
b1000 {
b1000 z
b1000 d
b11111 ^
b0 _
b0 $
b0 ,
b0 2
b0 L
b0 N
b0 b
b10000000000000000010100 l
b10000000000000000010100 t
b10000000000000000010100 x
b11111000000000000000001000 '
b11111000000000000000001000 .
b11111000000000000000001000 /
b11111000000000000000001000 A
b11111000000000000000001000 I
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 R
b10000000000000000010000 j
b10000000000000000010000 o
b10000000000000000010000 u
1!
#14
0!
#16
bx Q
bx a
xs
bx k
bx M
bx W
bx g
bx00 p
bx0000000000000000 T
bx0000000000000000 e
bx S
bx h
bx ~
bx $
bx ,
bx 2
bx L
bx N
bx b
bx m
bx r
x;
x6
x(
x<
x>
bx =
bx E
bx G
bx `
x3
bx B
bx C
bx i
bx P
bx n
bx {
bx z
bx d
bx ^
bx _
b10000000000000000011000 l
b10000000000000000011000 t
b10000000000000000011000 x
bx '
bx .
bx /
bx A
bx I
b101 -
bx O
bx Y
bx c
bx f
b10000000000000000010100 &
b10000000000000000010100 4
b10000000000000000010100 R
b10000000000000000010100 j
b10000000000000000010100 o
b10000000000000000010100 u
1!
#18
0!
#20
bx l
bx t
bx x
xy
bx -
bx &
bx 4
bx R
bx j
bx o
bx u
1!
#22
0!
#24
1!
#25
b110 #
