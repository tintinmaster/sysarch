$date
	Sun Jun 28 17:21:11 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ProcessorTestbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module proc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 $ writedata [31:0] $end
$var wire 32 % readdata [31:0] $end
$var wire 32 & pc [31:0] $end
$var wire 32 ' instr [31:0] $end
$var wire 1 ( datawrite $end
$var wire 32 ) dataaddr [31:0] $end
$scope module dmem $end
$var wire 6 * addr [5:0] $end
$var wire 1 ! clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 ( we $end
$var wire 32 , wd [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 - addr [5:0] $end
$var wire 32 . rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 ! clk $end
$var wire 32 / instr [31:0] $end
$var wire 32 0 readdata [31:0] $end
$var wire 1 " reset $end
$var wire 1 1 zero $end
$var wire 32 2 writedata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 32 4 pc [31:0] $end
$var wire 1 ( memwrite $end
$var wire 1 5 memtoreg $end
$var wire 1 6 lui $end
$var wire 1 7 dojump $end
$var wire 1 8 dobranch $end
$var wire 5 9 destreg [4:0] $end
$var wire 1 : alusrcbimm $end
$var wire 32 ; aluout [31:0] $end
$var wire 3 < alucontrol [2:0] $end
$scope module decoder $end
$var wire 32 = instr [31:0] $end
$var wire 1 1 zero $end
$var wire 6 > op [5:0] $end
$var wire 6 ? funct [5:0] $end
$var reg 3 @ alucontrol [2:0] $end
$var reg 1 : alusrcbimm $end
$var reg 5 A destreg [4:0] $end
$var reg 1 8 dobranch $end
$var reg 1 7 dojump $end
$var reg 1 6 lui $end
$var reg 1 5 memtoreg $end
$var reg 1 ( memwrite $end
$var reg 1 3 regwrite $end
$upscope $end
$scope module dp $end
$var wire 3 B alucontrol [2:0] $end
$var wire 1 : alusrcbimm $end
$var wire 1 ! clk $end
$var wire 5 C destreg [4:0] $end
$var wire 1 8 dobranch $end
$var wire 32 D instr [31:0] $end
$var wire 1 7 jump $end
$var wire 1 6 lui $end
$var wire 1 5 memtoreg $end
$var wire 32 E readdata [31:0] $end
$var wire 1 3 regwrite $end
$var wire 1 " reset $end
$var wire 32 F writedata [31:0] $end
$var wire 1 1 zero $end
$var wire 32 G srcbimm [31:0] $end
$var wire 32 H srcb [31:0] $end
$var wire 32 I srca [31:0] $end
$var wire 32 J signimm [31:0] $end
$var wire 32 K result [31:0] $end
$var wire 32 L pc [31:0] $end
$var wire 32 M luiout [31:0] $end
$var wire 32 N aluout [31:0] $end
$scope module alu $end
$var wire 3 O alucontrol [2:0] $end
$var wire 32 P b [31:0] $end
$var wire 32 Q result [31:0] $end
$var wire 1 1 zero $end
$var wire 32 R a [31:0] $end
$var reg 32 S resreg [31:0] $end
$var reg 32 T w1 [31:0] $end
$var reg 1 U w2 $end
$var reg 1 V z $end
$upscope $end
$scope module gpr $end
$var wire 1 ! clk $end
$var wire 5 W ra1 [4:0] $end
$var wire 5 X ra2 [4:0] $end
$var wire 5 Y wa3 [4:0] $end
$var wire 32 Z wd3 [31:0] $end
$var wire 1 3 we3 $end
$var wire 32 [ rd2 [31:0] $end
$var wire 32 \ rd1 [31:0] $end
$upscope $end
$scope module lu $end
$var wire 16 ] i [15:0] $end
$var wire 32 ^ o [31:0] $end
$upscope $end
$scope module pcenv $end
$var wire 1 ! clk $end
$var wire 1 8 dobranch $end
$var wire 1 7 dojump $end
$var wire 26 _ jumptarget [25:0] $end
$var wire 32 ` progcounter [31:0] $end
$var wire 1 " reset $end
$var wire 32 a nextpc [31:0] $end
$var wire 32 b incpc [31:0] $end
$var wire 32 c branchpc [31:0] $end
$var wire 32 d branchoffset [31:0] $end
$var reg 32 e pc [31:0] $end
$scope module pcbranch $end
$var wire 32 f b [31:0] $end
$var wire 1 g cin $end
$var wire 32 h y [31:0] $end
$var wire 1 i cout $end
$var wire 32 j a [31:0] $end
$upscope $end
$scope module pcinc $end
$var wire 32 k a [31:0] $end
$var wire 32 l b [31:0] $end
$var wire 1 m cin $end
$var wire 32 n y [31:0] $end
$var wire 1 o cout $end
$upscope $end
$upscope $end
$scope module se $end
$var wire 16 p a [15:0] $end
$var wire 32 q y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111011 q
b1111011 p
0o
b10000000000000000000100 n
0m
b100 l
b10000000000000000000000 k
b10000000000000000000100 j
0i
b10000000000000111110000 h
0g
b111101100 f
b10000000000000000000000 e
b1111011 d
b10000000000000111110000 c
b10000000000000000000100 b
b10000000000000000000100 a
b10000000000000000000000 `
b10000000001111011 _
b11110110000000000000000 ^
b1111011 ]
b0 \
b11001010111111101011101010111110 [
b1111011 Z
b1 Y
b1 X
b0 W
0V
0U
b1111011 T
b1111011 S
b0 R
b1111011 Q
b1111011 P
b101 O
b1111011 N
b11110110000000000000000 M
b10000000000000000000000 L
b1111011 K
b1111011 J
b0 I
b11001010111111101011101010111110 H
b1111011 G
b11001010111111101011101010111110 F
bx E
b100100000000010000000001111011 D
b1 C
b101 B
b1 A
b101 @
b111011 ?
b1001 >
b100100000000010000000001111011 =
b101 <
b1111011 ;
1:
b1 9
08
07
06
05
b10000000000000000000000 4
13
b11001010111111101011101010111110 2
01
bx 0
b100100000000010000000001111011 /
b100100000000010000000001111011 .
b0 -
b11001010111111101011101010111110 ,
bx +
b11110 *
b1111011 )
0(
b100100000000010000000001111011 '
b10000000000000000000000 &
bx %
b11001010111111101011101010111110 $
b100000 #
1"
1!
$end
#2
0!
#4
b1111011 $
b1111011 ,
b1111011 2
b1111011 F
b1111011 H
b1111011 [
1!
#5
0"
#6
0!
#8
b111001000 K
b111001000 Z
b110010 *
b111001000 )
b111001000 ;
b111001000 N
b111001000 Q
b111001000 S
b111001000 T
b10000000000000000001000 a
b11100100000 f
b111001000 G
b111001000 P
b1110010000000000000000000 M
b1110010000000000000000000 ^
b11001010111111101011101010111110 $
b11001010111111101011101010111110 ,
b11001010111111101011101010111110 2
b11001010111111101011101010111110 F
b11001010111111101011101010111110 H
b11001010111111101011101010111110 [
b10000000000011100101000 c
b10000000000011100101000 h
b10 9
b10 A
b10 C
b10 Y
b1000 ?
b100000000111001000 _
b111001000 J
b111001000 d
b111001000 q
b111001000 p
b111001000 ]
b10 X
b10000000000000000001000 b
b10000000000000000001000 j
b10000000000000000001000 n
b100100000000100000000111001000 '
b100100000000100000000111001000 .
b100100000000100000000111001000 /
b100100000000100000000111001000 =
b100100000000100000000111001000 D
b1 -
b10000000000000000000100 &
b10000000000000000000100 4
b10000000000000000000100 L
b10000000000000000000100 `
b10000000000000000000100 e
b10000000000000000000100 k
1!
#10
0!
#12
b10000000000000000001100 a
b1100100 f
b110010000000000000000 M
b110010000000000000000 ^
b1111011 I
b1111011 R
b1111011 \
b10000000000000001110000 c
b10000000000000001110000 h
b11 <
b11 @
b11 B
b11 O
0:
b0 9
b0 A
b0 C
b0 Y
b0 >
b11001 ?
b1000100000000000011001 _
b11001 J
b11001 d
b11001 q
b11001 p
b11001 ]
b1 W
b111001000 $
b111001000 ,
b111001000 2
b111001000 F
b111001000 H
b111001000 [
b10000000000000000001100 b
b10000000000000000001100 j
b10000000000000000001100 n
b1000100000000000011001 '
b1000100000000000011001 .
b1000100000000000011001 /
b1000100000000000011001 =
b1000100000000000011001 D
b10 -
b10000000000000000001000 &
b10000000000000000001000 4
b10000000000000000001000 L
b10000000000000000001000 `
b10000000000000000001000 e
b10000000000000000001000 k
1!
#14
0!
#16
b0 G
b0 P
b10000000000000000010000 a
b110000001001000 f
b11000000100100000000000000000 M
b11000000100100000000000000000 ^
b0 I
b0 R
b0 \
b0 $
b0 ,
b0 2
b0 F
b0 H
b0 [
b10000000110000001011000 c
b10000000110000001011000 h
b11 9
b11 A
b11 C
b11 Y
b10010 ?
b1100000010010 _
b1100000010010 J
b1100000010010 d
b1100000010010 q
b1100000010010 p
b1100000010010 ]
b0 W
b0 X
b10000000000000000010000 b
b10000000000000000010000 j
b10000000000000000010000 n
b1100000010010 '
b1100000010010 .
b1100000010010 /
b1100000010010 =
b1100000010010 D
b11 -
b10000000000000000001100 &
b10000000000000000001100 4
b10000000000000000001100 L
b10000000000000000001100 `
b10000000000000000001100 e
b10000000000000000001100 k
1!
#18
0!
#20
b10000000000000000010100 a
b1000000001000000 f
b100000000100000000000000000000 M
b100000000100000000000000000000 ^
b10000001000000001010100 c
b10000001000000001010100 h
b100 9
b100 A
b100 C
b100 Y
b10000 ?
b10000000010000 _
b10000000010000 J
b10000000010000 d
b10000000010000 q
b10000000010000 p
b10000000010000 ]
b10000000000000000010100 b
b10000000000000000010100 j
b10000000000000000010100 n
b10000000010000 '
b10000000010000 .
b10000000010000 /
b10000000010000 =
b10000000010000 D
b100 -
b10000000000000000010000 &
b10000000000000000010000 4
b10000000000000000010000 L
b10000000000000000010000 `
b10000000000000000010000 e
b10000000000000000010000 k
1!
#22
0!
#24
bx K
bx Z
xi
bx a
bx G
bx P
bx00 f
bx0000000000000000 M
bx0000000000000000 ^
bx I
bx R
bx \
bx $
bx ,
bx 2
bx F
bx H
bx [
bx c
bx h
x7
x5
x(
x8
x:
bx 9
bx A
bx C
bx Y
x3
bx >
bx ?
bx _
bx J
bx d
bx q
bx p
bx ]
bx W
bx X
b10000000000000000011000 b
b10000000000000000011000 j
b10000000000000000011000 n
bx '
bx .
bx /
bx =
bx D
b101 -
b10000000000000000010100 &
b10000000000000000010100 4
b10000000000000000010100 L
b10000000000000000010100 `
b10000000000000000010100 e
b10000000000000000010100 k
1!
#26
0!
#28
bx b
bx j
bx n
xo
bx -
bx &
bx 4
bx L
bx `
bx e
bx k
1!
#29
b11 #
